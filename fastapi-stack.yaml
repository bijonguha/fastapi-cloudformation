AWSTemplateFormatVersion: '2010-09-09'
Description: 'FastAPI service deployed on ECS Fargate with CloudFormation'

Parameters:
  ImageUri:
    Type: String
    Description: 'ECR image URI for the FastAPI application'
    Default: '016091700700.dkr.ecr.ap-south-1.amazonaws.com/fastapi-app:latest'

Resources:
  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP traffic from internet to FastAPI ALB'
      VpcId: vpc-1de2f875  # Your default VPC ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'Allow HTTP from anywhere'
      Tags:
        - Key: Name
          Value: FastAPI-ALB-SG

  # Security Group for ECS Tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow traffic from load balancer to FastAPI app'
      VpcId: vpc-1de2f875  # Your default VPC ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: 'Allow traffic from load balancer only'
      Tags:
        - Key: Name
          Value: FastAPI-ECS-SG

  # Parameter Store for API Key
  APIKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/fastapi/${AWS::StackName}/api-key'
      Type: String
      Value: bijonguha
      Description: 'API key for FastAPI authentication'
      Tags:
        Project: FastAPI

  # CloudWatch Log Group (minimal retention for cost savings)
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/fastapi-${AWS::StackName}'
      RetentionInDays: 3  # Minimal retention for cost savings
      Tags:
        - Key: Name
          Value: FastAPI-Logs

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'fastapi-cluster-${AWS::StackName}'
      Tags:
        - Key: Name
          Value: FastAPI-Cluster

  # Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags:
        - Key: Name
          Value: FastAPI-Execution-Role

  # Task Role (for app to access Parameter Store)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource: !Ref APIKeyParameter
      Tags:
        - Key: Name
          Value: FastAPI-Task-Role

  # ECS Task Definition (ultra cost-optimized)
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'fastapi-${AWS::StackName}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256              # Smallest possible (0.25 vCPU)
      Memory: 512            # Smallest possible (512 MB)
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: fastapi-container
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ENVIRONMENT
              Value: CLOUD-DEV
            - Name: API_KEY_PARAMETER_NAME
              Value: !Ref APIKeyParameter
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8080/healthcheck || exit 1'
            Interval: 60      # Less frequent checks to save costs
            Timeout: 10
            Retries: 2
            StartPeriod: 120

  # Application Load Balancer (uses default subnets automatically)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'fastapi-alb-${AWS::StackName}'
      Scheme: internet-facing
      Type: application
      # Don't specify Subnets - it will use all default subnets automatically
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: FastAPI-ALB

  # Target Group (explicit VPC reference)
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'fastapi-tg-${AWS::StackName}'
      Port: 8080
      Protocol: HTTP
      VpcId: vpc-1de2f875  # Your default VPC ID - THIS FIXES THE ERROR!
      TargetType: ip
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 60    # Less frequent for cost savings
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: FastAPI-Target-Group

  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service (single instance for maximum cost savings)
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub 'fastapi-service-${AWS::StackName}'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1        # Single instance for cost savings
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          # Don't specify Subnets - uses all default subnets
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: fastapi-container
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 120
      Tags:
        - Key: Name
          Value: FastAPI-Service

Outputs:
  LoadBalancerURL:
    Description: 'Your FastAPI application URL'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'

  HealthCheckURL:
    Description: 'Health check endpoint'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/healthcheck'

  HelloEndpoint:
    Description: 'Hello API endpoint'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/hello'

  TestCommand:
    Description: 'Command to test your API'
    Value: !Sub |
      curl -X POST 'http://${ApplicationLoadBalancer.DNSName}/hello' \
        -H 'Content-Type: application/json' \
        -H 'X-API-Key: bijonguha' \
        -d '{"name": "Your Name"}'

  MonthlyCostEstimate:
    Description: 'Estimated monthly cost in USD'
    Value: 'Approximately $8-12 USD/month'

  CostBreakdown:
    Description: 'Cost breakdown'
    Value: 'Fargate: ~$7, ALB: ~$16 (but you can stop Fargate when not using)'