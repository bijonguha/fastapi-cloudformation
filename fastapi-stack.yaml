AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ultra-simple FastAPI service - guaranteed to work'

Parameters:
  ImageUri:
    Type: String
    Description: 'ECR image URI for the FastAPI application'
    Default: '016091700700.dkr.ecr.ap-south-1.amazonaws.com/fastapi-app:latest'

Resources:
  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP traffic from internet'
      VpcId: vpc-1de2f875  # Your default VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Group for ECS Tasks  
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow traffic from load balancer'
      VpcId: vpc-1de2f875  # Your default VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/fastapi-${AWS::StackName}'
      RetentionInDays: 1  # Minimal retention for cost

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'fastapi-${AWS::StackName}'

  # Task Execution Role (minimal permissions)
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # ECS Task Definition (ultra minimal)
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'fastapi-${AWS::StackName}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256      # Smallest possible
      Memory: 512    # Smallest possible
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: fastapi-container
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ENVIRONMENT
              Value: LOCAL  # Use LOCAL mode to avoid SSM
            - Name: API_KEY
              Value: bijonguha  # Hardcode for simplicity

  # Application Load Balancer (with your actual subnets)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'fastapi-${AWS::StackName}'
      Scheme: internet-facing
      Type: application
      Subnets:
        - subnet-052b286d  # ap-south-1a
        - subnet-263f4f6a  # ap-south-1b  
        - subnet-ca2299b1  # ap-south-1c
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'fastapi-tg-${AWS::StackName}'
      Port: 8080
      Protocol: HTTP
      VpcId: vpc-1de2f875  # Your default VPC
      TargetType: ip
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200

  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service (single instance)
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub 'fastapi-${AWS::StackName}'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1  # Single instance for cost savings
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - subnet-052b286d  # ap-south-1a
            - subnet-263f4f6a  # ap-south-1b  
            - subnet-ca2299b1  # ap-south-1c
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: fastapi-container
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 120

Outputs:
  LoadBalancerURL:
    Description: 'Your FastAPI application URL'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  HealthCheckURL:
    Description: 'Health check endpoint'  
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/healthcheck'

  HelloEndpoint:
    Description: 'API endpoint'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/hello'

  TestCommand:
    Description: 'Test command'
    Value: !Sub |
      curl -X POST 'http://${ApplicationLoadBalancer.DNSName}/hello' \
        -H 'Content-Type: application/json' \
        -H 'X-API-Key: bijonguha' \
        -d '{"name": "Test"}'