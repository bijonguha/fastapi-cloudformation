name: Deploy FastAPI to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: fastapi-app
  STACK_NAME: fastapi-stack

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        python -m pytest tests/ -v

    - name: Run security scan
      run: |
        pip install bandit
        bandit -r app.py

    - name: Lint code
      run: |
        pip install flake8
        flake8 app.py --max-line-length=100

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Validate CloudFormation template
      run: |
        aws cloudformation validate-template --template-body file://fastapi-stack.yaml

    - name: Deploy to AWS CloudFormation
      id: deploy
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
        STACK_NAME_WITH_BRANCH: ${{ env.STACK_NAME }}-${{ github.ref_name }}
      run: |
        aws cloudformation deploy \
          --template-file fastapi-stack.yaml \
          --stack-name $STACK_NAME_WITH_BRANCH \
          --parameter-overrides ImageUri=$IMAGE_URI \
          --capabilities CAPABILITY_IAM \
          --region $AWS_REGION \
          --no-fail-on-empty-changeset

        # Get load balancer URL
        LB_URL=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME_WITH_BRANCH \
          --region $AWS_REGION \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        
        echo "load-balancer-url=http://$LB_URL" >> $GITHUB_OUTPUT

    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 120

    - name: Run integration tests
      env:
        BASE_URL: ${{ steps.deploy.outputs.load-balancer-url }}
      run: |
        # Test health check
        curl -f "$BASE_URL/healthcheck" || exit 1
        
        # Test hello endpoint with API key
        curl -f -X POST "$BASE_URL/hello" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: bijonguha" \
          -d '{"name": "GitHub Actions"}' || exit 1
        
        echo "‚úÖ All integration tests passed!"

    - name: Log deployment success
      if: success() && github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ FastAPI deployment successful!"
        echo "üì° Application URL: ${{ steps.deploy.outputs.load-balancer-url }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üì¶ Image: ${{ steps.build-image.outputs.image }}"
        echo "‚úÖ Deployment completed at $(date)"

    - name: Log deployment failure
      if: failure()
      run: |
        echo "‚ùå FastAPI deployment failed on branch ${{ github.ref_name }}"
        echo "üîç Check the logs above for error details"
        echo "üí° Common issues:"
        echo "   - AWS permissions"
        echo "   - CloudFormation template errors"
        echo "   - Docker build failures"
        echo "   - Integration test failures"

  cleanup-old-images:
    name: Cleanup Old ECR Images
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Delete old ECR images
      run: |
        # Keep only the 10 most recent images
        aws ecr list-images --repository-name $ECR_REPOSITORY \
          --filter tagStatus=TAGGED \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output json | \
        jq '.[]' | \
        jq -s 'sort_by(.imagePushedAt) | reverse | .[10:]' | \
        jq -r '.[] | .imageDigest' | \
        while read digest; do
          if [ ! -z "$digest" ]; then
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$digest
          fi
        done || echo "No old images to delete"